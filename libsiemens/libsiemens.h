#ifndef _LIBSIEMENS_H_
	#define _LIBSIEMENS_H_

typedef struct
{
	union
	{
		struct
		{
			unsigned int uid1; 
			unsigned int uid2; 
			unsigned int uid3; 
			unsigned int uid4; 
			unsigned int uid5;
			unsigned int uid6;
			unsigned int uid7;
			unsigned int uid8;
		};
		unsigned int data[8]; 
	}; 
} FIND_UIDS;

//////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////работа с файлами/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//простой поиск файлов
unsigned int FindFiles(DIR_ENTRY ***DE, const char *dir, const char *mask);
//рекурсивный поиск файлов по uid
unsigned int FindFilesRec(DIR_ENTRY ***DE, const char *dir, FIND_UIDS *fu);
//очистка
void DE_Free(DIR_ENTRY ***DE);
//сортировка пузырьком
void DE_Sort1(DIR_ENTRY ***DE);
//сортировка пузырьком, но папки наверху
void DE_Sort1_With_Dirs(DIR_ENTRY ***DE);
//получение расширения из пути к файлу
int GetExtByPath(char *dest, const char *path);
//получение имении файла из его имени без расширения
int GetFNameWithoutExt(char *dest, const char *fname);
//конвертация строки из utf8
void utf8_2fname(char *dest, const char *source);


/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////работа с IMHDR/////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//создание из любого графического файла
IMGHDR *CreateIMGHDRFromImgFile(const char *path);
//отрисовка
void DrawIMGHDR(IMGHDR *img, int x, int y, int x2, int y2, int bleed_x, int bleed_y);
//очистка
void FreeIMGHDR(IMGHDR *img);

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//получение длины строки
unsigned int GetWidthWS(WSHDR *ws, const int font);
//отправка ipc мессаги
void IPC_SendMessage(IPC_REQ *ipc, const char *name_to, const char *name_from, const int mess, void *data);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//загрузка лэнгпака из текстового файла
int InitLang(const char *path, char ***lgp);
//соотвественно очистка
void FreeLang(char ***lgp);

//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////работа с obs/////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//получение uid файла из его пути
unsigned int GetExtUidByFileName(const char *path);
//создание объекта из изображения
HObj CreateHObjFromImgFile(const char *path);
//получени IMGHDR* из объекта
IMGHDR *HObj2IMGHDR(HObj obj);
//создание объекта из аудиофайла
HObj CreateHObjFromAudioFile(char *path);
//установка громкости проигрывания аудиофайла
unsigned int Obs_SoundGetVolume(HObj obj);

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//запуск энтрипоинта
void ExecEntrypoint(const char *name);
//запуск шорката
void ExecShortcut(const char *name);
//запуск файла
void ExecFile(const char *path);
//получение csm_id из адреса
unsigned int GetCSMIDFromAddr(const char *addr);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////работа со строками/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//преобразование строки в нижний регистр
int str2lower(char *dest, const char *src);
//аналого strcmp, но без чувствительности к регистру
int strcmp_nocase(const char *s, const char *d);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//установка хука на вызов функции, должна быть загружена swi.blib!
int *SetSWIHook(int swi_num, void *proc);
//снятие хука
void DestroySWIHook(int swi_num, unsigned int *addr);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int GetStrDataFromSystemConf(char *dest, const char *path, const char *keyword);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void patch_rect(RECT*rc, int x, int y, int x2, int y2);

void patch_header(const HEADER_DESC* head);

void patch_input(const INPUTDIA_DESC* inp);
#endif
